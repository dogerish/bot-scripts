#! /bin/bash
# scripts/functions for controlling a bot and its logs
shopt -s extglob

MYNAME="$(basename $0)"

# sends a slack message using $1 as the webhook and $2 as the message content
send_slack_message () {
	(( ${#1} == 0 )) && return 1
	# protect webhook secret by putting it in a curl config file
	option_file=`mktemp`
	chmod 600 $option_file
	cat > $option_file <<< "url = \"$1\""
	curl \
		-K $option_file \
		-X POST -H 'Content-type: application/json' \
		--data '{ "text": "'"$2"'" }' &>/dev/null
	rm $option_file
}

# load config for a bot ($1)
reconfig ()
{
	# enter the bot's directory
	botdir="$1"
	if [[ -d "$botdir" ]]
	then
		cd "$botdir"
		echo "-> $PWD"
		botdir="$PWD" # get full path
	else
		printf "%q is not a directory.\n" "$botdir"
		exit 2
	fi

	# BEGIN CONFIG
	# name of bot
	BOTNAME="$(basename $PWD)"
	# if 1, the bot name will make the base name for google drive. if 0, LOGDIR 
	# is used.
	AUTONAME=1
	# this is put before the base name for the google drive folder
	GDPREFIX="bot-logs/"
	# same as above, but is put at the end
	GDSUFFIX=""
	# slack webhook
	SLACKHOOOK=""
	# name of the bot's local log directory
	LOGDIR="logs"
	# file for stdout / logs (in LOGDIR)
	LOG="log.txt"
	# for stderr / errors
	ERR="err.txt"
	DATESTMT=$'\n\t----- '"$(date)"$' -----\n'
	# function defining how to run a bot
	RUNBOT ()
	{
		for f in ./@(index|main)*
		do
			[[ -x "$f" ]] || continue
			if (( "${#SLACKHOOK}" > 0 ))
			then
				"$f" || send_slack_message "$SLACKHOOK" \
					"$MYNAME: $BOTNAME exited with code $?"
				exit 2
			else
				exec "$f"
			fi
		done
		msg="$MYNAME: I don't know how to run '$BOTNAME'" 
		echo "$msg" >&2
		send_slack_message "$SLACKHOOK" "$msg"
		exit 1
	}
	# END CONFIG

	# source a file if it exists
	sfe () { [[ -e "$1" ]] && source "$1"; cd "$botdir"; }
	# source other config files
	sfe "$HOME/.config/botctl"
	sfe ".botctl"
	LOG="$LOGDIR/$LOG"
	ERR="$LOGDIR/$ERR"


	(( AUTONAME )) && target="${BOTNAME}" || target="$LOGDIR"
	target="gdrive:${GDPREFIX}${target}${GDSUFFIX}"
}

# clears the log files by writing DATESTMT to them
clearlogs () { echo "$DATESTMT" | tee "$LOG" "$ERR"; }

# starts watches on the log folder and uploads the file when a log file is modified
logwatch ()
{
	{
		inotifywait -rme modify "$LOGDIR" --format "%w%f" | while read file
			do rclone copy "$file" "$target/"
		done
	} &
}
# uploads logs to google drive using rclone
upload () { rclone sync "$LOGDIR" "$target"; }

# starts the bot
run ()
{
	# print current directory and give user chance to abort if in wrong dir
	pwd && sleep 5
	mkdir -p "$LOGDIR"
	# add date to logs
	echo "$DATESTMT" | tee -a "$LOG" "$ERR"
	RUNBOT >> "$LOG" 2>> "$ERR" &
}


SCRIPTS="clearlogs|logwatch|upload|run"
HELP="Usage: ${MYNAME} SCRIPT [BOTDIR...]

Where SCRIPT is $SCRIPTS
and BOTDIRS are the directories of the bots to control (default = working directory)"
# if the script is accepted, run it for each of the bots (arguments 2 to infinity)
if [[ "$1" != @($SCRIPTS) ]]; then echo -e "$HELP"; exit 1; fi
bots=("${@:2}")
(( ${#bots[@]} )) || bots=(./)
launchdir="$PWD"
for bot in "${bots[@]}"
do
	reconfig "$bot"
	"$1"
	cd "$launchdir"
done
